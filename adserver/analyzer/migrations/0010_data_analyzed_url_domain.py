# Generated by Django 5.0.14 on 2025-08-14 23:10

from django.db import migrations

from urllib.parse import urlparse


def get_domain_from_url(url):
    """This is re-implemented from utils in case the function every moves."""
    if not url:
        return None
    try:
        parsed = urlparse(url)
    except ValueError:
        return None
    return parsed.netloc


def forwards(apps, schema_editor):
    """Add the initial region and topic data."""
    AnalyzedUrl = apps.get_model("adserver_analyzer", "AnalyzedUrl")
    AnalyzedAdvertiserUrl = apps.get_model("adserver_analyzer", "AnalyzedAdvertiserUrl")

    # Update AnalyzedUrls domain field
    urls = []
    batch_size = 1000
    for analyzed_url in AnalyzedUrl.objects.all().order_by("pk").iterator():
        if not analyzed_url.domain:
            analyzed_url.domain = get_domain_from_url(analyzed_url.url)
            urls.append(analyzed_url)
        if len(urls) >= batch_size:
            AnalyzedUrl.objects.bulk_update(urls, ["domain"])
            urls = []
    if len(urls) >= 0:
        AnalyzedUrl.objects.bulk_update(urls, ["domain"])
        urls = []

    # Do the same for AnalyzedAdvertiserUrls
    urls = []
    for analyzed_advertiser_url in AnalyzedAdvertiserUrl.objects.all().order_by("pk").iterator():
        if not analyzed_advertiser_url.domain:
            analyzed_advertiser_url.domain = get_domain_from_url(analyzed_advertiser_url.url)
            urls.append(analyzed_advertiser_url)
        if len(urls) >= batch_size:
            AnalyzedAdvertiserUrl.objects.bulk_update(urls, ["domain"])
            urls = []
    if len(urls) >= 0:
        AnalyzedAdvertiserUrl.objects.bulk_update(urls, ["domain"])
        urls = []


class Migration(migrations.Migration):

    dependencies = [
        ('adserver_analyzer', '0009_domain_analyzed_url'),
    ]

    operations = [
        # No need to go backwards
        # The models these write to are deleted in the previous migration
        migrations.RunPython(forwards, reverse_code=migrations.RunPython.noop)
    ]
